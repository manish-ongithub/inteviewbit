Given a linked list, remove the nth node from the end of list and return its head.

For example,
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.

 Note:
* If n is greater than the size of the list, remove the first node of the list. 
Try doing it using constant additional space.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * @input B : Integer
 * 
 * @Output head pointer of list.
 */
 int getlength(listnode *p)
 {
     int len = 0;
     while(p!=NULL)
     {
         len++;
         p=p->next;
     }
     return len;
 }
 
 
listnode* removeNthFromEnd(listnode* A, int B) {
    
    int len = getlength(A);
    listnode *end = A;
    listnode *prev = NULL;
    listnode *elem = A;
    int counter = 0;
    
    if (B >= len)
    {
        A = A->next;
        return A;
    }
    while(counter < B)
    {
        end = end->next;
        counter++;
    }
    
    while(end != NULL)
    {
        
        prev = elem;
        elem = elem->next;
        end = end->next;
    }
    prev->next = elem->next;
    return A;
}
