Given a singly linked list

    L: L0 → L1 → … → Ln-1 → Ln,
reorder it to:

    L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …
You must do this in-place without altering the nodes’ values.

For example,
Given {1,2,3,4}, reorder it to {1,4,2,3}.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 void reverse(ListNode **head){
      
    ListNode *p = NULL;
    ListNode *current = *head;
    ListNode *n;
 
    while (current != NULL)
    {
        n = current->next;
        current->next = p;
        p = current;
        current = n;
    }
 
    *head = p;
 }
 
void print(ListNode *head)
{
    while (head != NULL)
    {
        cout << head->val << " ";
        if(head->next) 
            cout << "-> ";
            
        head = head->next;
    }
    cout << endl;
}
 
ListNode* Solution::reorderList(ListNode* A) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    
     ListNode *slow = A;
     ListNode *fast = slow->next;
     while (fast && fast->next)
     {
        slow = slow->next;
        fast = fast->next->next;
     }
     
     ListNode *head1 = A; 
     ListNode *head2 = slow->next;
     slow->next = NULL;
     
     reverse(&head2);
     
     //print(head2);
    
    ListNode *head = new ListNode(0);
 
    
    ListNode *current = head;
    while (head1 || head2)
    {
        
        if (head1)
        {
            current->next = head1;
            current = current->next;
            head1 = head1->next;
        }
 
        
        if (head2)
        {
            current->next = head2;
            current = current->next;
            head2 = head2->next;
        }
    }
 
    if(head->next != NULL)
        head = head->next;
        
    return head;
}
