Merge two sorted linked lists and return it as a new list. 
The new list should be made by splicing together the nodes of the first two lists, and should also be sorted.

For example, given following linked lists :

  5 -> 8 -> 20 
  4 -> 11 -> 15
The merged list should be :

4 -> 5 -> 8 -> 11 -> 15 -> 20


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 * 
 * typedef struct ListNode listnode;
 * 
 * listnode* listnode_new(int val) {
 *     listnode* node = (listnode *) malloc(sizeof(listnode));
 *     node->val = val;
 *     node->next = NULL;
 *     return node;
 * }
 */
/**
 * @input A : Head pointer of linked list 
 * @input B : Head pointer of linked list 
 * 
 * @Output head pointer of list.
 */
listnode* mergeTwoLists(listnode* A, listnode* B) {
    listnode *result = NULL;
    if (A == NULL)
        return B;
    if(B == NULL)
        return A;
    
    if(A->val < B->val)
    {
        result = A;
        
    }
    else
    {
        result = B;
        B = A;
        A = result;
    }
    while(A->next != NULL && B != NULL)
    {
        if(A->next->val > B->val)
        {
            listnode* temp = A->next;
            A->next = B;
            B = temp;
            
        }
        A = A->next;
        
    }
    
    if(A->next == NULL)
        A->next = B;
    
    return result;
}


//recursive solution

listnode* mergeTwoLists(listnode* A, listnode* B) {
    listnode *result = NULL;
    if (A == NULL)
        return B;
    if(B == NULL)
        return A;
    
    if(A->val <= B->val)
    {
        result = A;
        result->next = mergeTwoLists(A->next,B);
    }
    else 
    {
        result = B;
        result->next = mergeTwoLists(A,B->next);
    }
    return result;
}
